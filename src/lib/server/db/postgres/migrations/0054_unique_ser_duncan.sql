DROP INDEX IF EXISTS "materialized_journal_view_index"; --> statement-breakpoint 
DROP INDEX IF EXISTS "materialized_account_view_index"; --> statement-breakpoint 
DROP INDEX IF EXISTS "materialized_bill_view_index"; --> statement-breakpoint 
DROP INDEX IF EXISTS "materialized_budget_view_index"; --> statement-breakpoint 
DROP INDEX IF EXISTS "materialized_category_view_index"; --> statement-breakpoint 
DROP INDEX IF EXISTS "materialized_tag_view_index"; --> statement-breakpoint 
DROP INDEX IF EXISTS "materialized_label_view_index"; --> statement-breakpoint 
DROP MATERIALIZED VIEW IF EXISTS "date_range_materialized_view"; --> statement-breakpoint 
DROP MATERIALIZED VIEW IF EXISTS "label_materialized_view"; --> statement-breakpoint 
DROP MATERIALIZED VIEW IF EXISTS "category_materialized_view"; --> statement-breakpoint 
DROP MATERIALIZED VIEW IF EXISTS "budget_materialized_view"; --> statement-breakpoint 
DROP MATERIALIZED VIEW IF EXISTS "bill_materialized_view"; --> statement-breakpoint 
DROP MATERIALIZED VIEW IF EXISTS "tag_materialized_view"; --> statement-breakpoint 
DROP MATERIALIZED VIEW IF EXISTS "account_materialized_view"; --> statement-breakpoint 
DROP MATERIALIZED VIEW IF EXISTS "journal_extended_view"; --> statement-breakpoint 

DROP VIEW IF EXISTS "label_view"; --> statement-breakpoint 
DROP VIEW IF EXISTS "category_view"; --> statement-breakpoint 
DROP VIEW IF EXISTS "budget_view"; --> statement-breakpoint 
DROP VIEW IF EXISTS "bill_view"; --> statement-breakpoint 
DROP VIEW IF EXISTS "tag_view"; --> statement-breakpoint 
DROP VIEW IF EXISTS "account_view"; --> statement-breakpoint 
DROP VIEW IF EXISTS "journal_view"; --> statement-breakpoint 

CREATE VIEW "public"."account_view" AS (with "filessq" as (select "account_id", count("id") as "file_count" from "files" where "files"."account_id" is not null group by "files"."account_id"), "notessq" as (select "account_id", count("id") as "note_count" from "notes" where "notes"."account_id" is not null group by "notes"."account_id"), "reminderssq" as (select "account_id", count("id") as "reminder_count" from "notes" where ("notes"."type" = 'reminder' and "notes"."account_id" is not null) group by "notes"."account_id") select "account"."id", "account"."import_id", "account"."account_import_detail_id", "account"."title", "account"."type", "account"."is_cash", "account"."is_net_worth", "account"."account_group", "account"."account_group_2", "account"."account_group_3", "account"."account_group_combined", "account"."account_title_combined", "account"."start_date", "account"."end_date", "account"."status", "account"."active", "account"."disabled", "account"."allow_update", "account"."created_at", "account"."updated_at", sum("journal_entry"."amount") as "sum", count("journal_entry"."id") as "count", min("journal_entry"."date") as "firstDate", max("journal_entry"."date") as "lastDate", max("note_count") as "note_count", max("reminder_count") as "reminder_count", max("file_count") as "file_count" from "account" left join "journal_entry" on "account"."id" = "journal_entry"."account_id" left join "import" on "journal_entry"."import_id" = "import"."id" left join "filessq" on "account"."id" = "filessq"."account_id" left join "notessq" on "account"."id" = "notessq"."account_id" left join "reminderssq" on "account"."id" = "reminderssq"."account_id" group by "account"."id");--> statement-breakpoint
CREATE VIEW "public"."bill_view" AS (with "filessq" as (select "bill_id", count("id") as "file_count" from "files" where "files"."bill_id" is not null group by "files"."bill_id"), "notessq" as (select "bill_id", count("id") as "note_count" from "notes" where "notes"."bill_id" is not null group by "notes"."bill_id"), "reminderssq" as (select "bill_id", count("id") as "reminder_count" from "notes" where ("notes"."type" = 'reminder' and "notes"."bill_id" is not null) group by "notes"."bill_id") select "bill"."id", "bill"."import_id", "bill"."bill_import_detail_id", "bill"."title", "bill"."status", "bill"."active", "bill"."disabled", "bill"."allow_update", "bill"."created_at", "bill"."updated_at", sum(CASE WHEN "account"."type" IN ('asset', 'liability') THEN "journal_entry"."amount" ELSE 0 END) as "sum", count(CASE WHEN "account"."type" IN ('asset', 'liability') THEN 1 ELSE NULL END) as "count", min("journal_entry"."date") as "firstDate", max("journal_entry"."date") as "lastDate", max("note_count") as "note_count", max("reminder_count") as "reminder_count", max("file_count") as "file_count" from "bill" left join "journal_entry" on "bill"."id" = "journal_entry"."bill_id" left join "account" on "journal_entry"."account_id" = "account"."id" left join "filessq" on "bill"."id" = "filessq"."bill_id" left join "notessq" on "bill"."id" = "notessq"."bill_id" left join "reminderssq" on "bill"."id" = "reminderssq"."bill_id" group by "bill"."id");--> statement-breakpoint
CREATE VIEW "public"."budget_view" AS (with "filessq" as (select "budget_id", count("id") as "file_count" from "files" where "files"."budget_id" is not null group by "files"."budget_id"), "notessq" as (select "budget_id", count("id") as "note_count" from "notes" where "notes"."budget_id" is not null group by "notes"."budget_id"), "reminderssq" as (select "budget_id", count("id") as "reminder_count" from "notes" where ("notes"."type" = 'reminder' and "notes"."budget_id" is not null) group by "notes"."budget_id") select "budget"."id", "budget"."import_id", "budget"."budget_import_detail_id", "budget"."title", "budget"."status", "budget"."active", "budget"."disabled", "budget"."allow_update", "budget"."created_at", "budget"."updated_at", sum(CASE WHEN "account"."type" IN ('asset', 'liability') THEN "journal_entry"."amount" ELSE 0 END) as "sum", count(CASE WHEN "account"."type" IN ('asset', 'liability') THEN 1 ELSE NULL END) as "count", min("journal_entry"."date") as "firstDate", max("journal_entry"."date") as "lastDate", max("note_count") as "note_count", max("reminder_count") as "reminder_count", max("file_count") as "file_count" from "budget" left join "journal_entry" on "budget"."id" = "journal_entry"."budget_id" left join "account" on "journal_entry"."account_id" = "account"."id" left join "filessq" on "budget"."id" = "filessq"."budget_id" left join "notessq" on "budget"."id" = "notessq"."budget_id" left join "reminderssq" on "budget"."id" = "reminderssq"."budget_id" group by "budget"."id");--> statement-breakpoint
CREATE VIEW "public"."category_view" AS (with "filessq" as (select "category_id", count("id") as "file_count" from "files" where "files"."category_id" is not null group by "files"."category_id"), "notessq" as (select "category_id", count("id") as "note_count" from "notes" where "notes"."category_id" is not null group by "notes"."category_id"), "reminderssq" as (select "category_id", count("id") as "reminder_count" from "notes" where ("notes"."type" = 'reminder' and "notes"."category_id" is not null) group by "notes"."category_id") select "category"."id", "category"."import_id", "category"."category_import_detail_id", "category"."title", "category"."group", "category"."single", "category"."status", "category"."active", "category"."disabled", "category"."allow_update", "category"."created_at", "category"."updated_at", sum(CASE WHEN "account"."type" IN ('asset', 'liability') THEN "journal_entry"."amount" ELSE 0 END) as "sum", count(CASE WHEN "account"."type" IN ('asset', 'liability') THEN 1 ELSE NULL END) as "count", min("journal_entry"."date") as "firstDate", max("journal_entry"."date") as "lastDate", max("note_count") as "note_count", max("reminder_count") as "reminder_count", max("file_count") as "file_count" from "category" left join "journal_entry" on "category"."id" = "journal_entry"."category_id" left join "account" on "journal_entry"."account_id" = "account"."id" left join "filessq" on "category"."id" = "filessq"."category_id" left join "notessq" on "category"."id" = "notessq"."category_id" left join "reminderssq" on "category"."id" = "reminderssq"."category_id" group by "category"."id");--> statement-breakpoint
CREATE VIEW "public"."import_check_view" AS (select "id", "relation_id", "relation_2_id", processed_info->'dataToUse'->'description' as "description" from "import_item_detail" where processed_info->'dataToUse'->'description' is not null);--> statement-breakpoint
CREATE VIEW "public"."journal_view" AS (with "filessq" as (select "transaction_id", count("id") as "file_count" from "files" where "files"."transaction_id" is not null group by "files"."transaction_id"), "notessq" as (select "transaction_id", count("id") as "note_count" from "notes" where "notes"."transaction_id" is not null group by "notes"."transaction_id"), "reminderssq" as (select "transaction_id", count("id") as "reminder_count" from "notes" where ("notes"."type" = 'reminder' and "notes"."transaction_id" is not null) group by "notes"."transaction_id") select "journal_entry"."id", "journal_entry"."import_id", "journal_entry"."import_detail_id", "journal_entry"."unique_id", "journal_entry"."amount", "transaction"."id" as "transaction_id", "journal_entry"."description", "journal_entry"."date", "journal_entry"."date_text", "journal_entry"."tag_id", "journal_entry"."bill_id", "journal_entry"."budget_id", "journal_entry"."category_id", "journal_entry"."account_id", "journal_entry"."year_month_day", "journal_entry"."year_week", "journal_entry"."year_month", "journal_entry"."year_quarter", "journal_entry"."year", "journal_entry"."linked", "journal_entry"."reconciled", "journal_entry"."data_checked", "journal_entry"."complete", "journal_entry"."transfer", "journal_entry"."created_at", "journal_entry"."updated_at", "account"."title", "account"."type", "account"."is_cash", "account"."is_net_worth", "account"."account_group", "account"."account_group_2", "account"."account_group_3", "account"."account_group_combined", "account"."account_title_combined", "account"."start_date", "account"."end_date", "account"."status" as "account_status", "account"."active" as "account_active", "account"."disabled" as "account_disabled", "account"."allow_update" as "account_allow_update", "bill"."title" as "bill_title", "bill"."status" as "bill_status", "bill"."active" as "bill_active", "bill"."disabled" as "bill_disabled", "bill"."allow_update" as "bill_allow_update", "budget"."title" as "budget_title", "budget"."status" as "budget_status", "budget"."active" as "budget_active", "budget"."disabled" as "budget_disabled", "budget"."allow_update" as "budget_allow_update", "category"."title" as "category_title", "category"."group" as "category_group", "category"."single" as "category_single", "category"."status" as "category_status", "category"."active" as "category_active", "category"."disabled" as "category_disabled", "category"."allow_update" as "category_allow_update", "tag"."title" as "tag_title", "tag"."group" as "tag_group", "tag"."single" as "tag_single", "tag"."status" as "tag_status", "tag"."active" as "tag_active", "tag"."disabled" as "tag_disabled", "tag"."allow_update" as "tag_allow_update", "import"."title" as "import_title", "note_count", "reminder_count", "file_count", true as "all" from "journal_entry" left join "transaction" on "journal_entry"."transaction_id" = "transaction"."id" left join "account" on "journal_entry"."account_id" = "account"."id" left join "bill" on "journal_entry"."bill_id" = "bill"."id" left join "budget" on "journal_entry"."budget_id" = "budget"."id" left join "category" on "journal_entry"."category_id" = "category"."id" left join "tag" on "journal_entry"."tag_id" = "tag"."id" left join "import" on "journal_entry"."import_id" = "import"."id" left join "filessq" on "journal_entry"."transaction_id" = "filessq"."transaction_id" left join "notessq" on "journal_entry"."transaction_id" = "notessq"."transaction_id" left join "reminderssq" on "journal_entry"."transaction_id" = "reminderssq"."transaction_id");--> statement-breakpoint
CREATE VIEW "public"."label_view" AS (with "filessq" as (select "label_id", count("id") as "file_count" from "files" where "files"."label_id" is not null group by "files"."label_id"), "notessq" as (select "label_id", count("id") as "note_count" from "notes" where "notes"."label_id" is not null group by "notes"."label_id"), "reminderssq" as (select "label_id", count("id") as "reminder_count" from "notes" where ("notes"."type" = 'reminder' and "notes"."label_id" is not null) group by "notes"."label_id") select "label"."id", "label"."import_id", "label"."label_import_detail_id", "label"."title", "label"."status", "label"."active", "label"."disabled", "label"."allow_update", "label"."created_at", "label"."updated_at", sum(CASE WHEN "account"."type" IN ('asset', 'liability') THEN "journal_entry"."amount" ELSE 0 END) as "sum", count(CASE WHEN "account"."type" IN ('asset', 'liability') THEN 1 ELSE NULL END) as "count", min("journal_entry"."date") as "firstDate", max("journal_entry"."date") as "lastDate", max("note_count") as "note_count", max("reminder_count") as "reminder_count", max("file_count") as "file_count" from "label" left join "labels_to_journals" on "label"."id" = "labels_to_journals"."label_id" left join "journal_entry" on "labels_to_journals"."journal_id" = "journal_entry"."id" left join "account" on "journal_entry"."account_id" = "account"."id" left join "filessq" on "label"."id" = "filessq"."label_id" left join "notessq" on "label"."id" = "notessq"."label_id" left join "reminderssq" on "label"."id" = "reminderssq"."label_id" group by "label"."id");--> statement-breakpoint
CREATE VIEW "public"."tag_view" AS (with "filessq" as (select "tag_id", count("id") as "file_count" from "files" where "files"."tag_id" is not null group by "files"."tag_id"), "notessq" as (select "tag_id", count("id") as "note_count" from "notes" where "notes"."tag_id" is not null group by "notes"."tag_id"), "reminderssq" as (select "tag_id", count("id") as "reminder_count" from "notes" where ("notes"."type" = 'reminder' and "notes"."tag_id" is not null) group by "notes"."tag_id") select "tag"."id", "tag"."import_id", "tag"."tag_import_detail_id", "tag"."title", "tag"."group", "tag"."single", "tag"."status", "tag"."active", "tag"."disabled", "tag"."allow_update", "tag"."created_at", "tag"."updated_at", sum(CASE WHEN "account"."type" IN ('asset', 'liability') THEN "journal_entry"."amount" ELSE 0 END) as "sum", count(CASE WHEN "account"."type" IN ('asset', 'liability') THEN 1 ELSE NULL END) as "count", min("journal_entry"."date") as "firstDate", max("journal_entry"."date") as "lastDate", max("note_count") as "note_count", max("reminder_count") as "reminder_count", max("file_count") as "file_count" from "tag" left join "journal_entry" on "tag"."id" = "journal_entry"."tag_id" left join "account" on "journal_entry"."account_id" = "account"."id" left join "filessq" on "tag"."id" = "filessq"."tag_id" left join "notessq" on "tag"."id" = "notessq"."tag_id" left join "reminderssq" on "tag"."id" = "reminderssq"."tag_id" group by "tag"."id");--> statement-breakpoint
CREATE MATERIALIZED VIEW "public"."account_materialized_view" AS (select "id", "import_id", "account_import_detail_id", "title", "type", "is_cash", "is_net_worth", "account_group", "account_group_2", "account_group_3", "account_group_combined", "account_title_combined", "start_date", "end_date", "status", "active", "disabled", "allow_update", "created_at", "updated_at", "sum", "count", "firstDate", "lastDate", "note_count", "reminder_count", "file_count" from "account_view");--> statement-breakpoint
CREATE MATERIALIZED VIEW "public"."bill_materialized_view" AS (select "id", "import_id", "bill_import_detail_id", "title", "status", "active", "disabled", "allow_update", "created_at", "updated_at", "sum", "count", "firstDate", "lastDate", "note_count", "reminder_count", "file_count" from "bill_view");--> statement-breakpoint
CREATE MATERIALIZED VIEW "public"."budget_materialized_view" AS (select "id", "import_id", "budget_import_detail_id", "title", "status", "active", "disabled", "allow_update", "created_at", "updated_at", "sum", "count", "firstDate", "lastDate", "note_count", "reminder_count", "file_count" from "budget_view");--> statement-breakpoint
CREATE MATERIALIZED VIEW "public"."category_materialized_view" AS (select "id", "import_id", "category_import_detail_id", "title", "group", "single", "status", "active", "disabled", "allow_update", "created_at", "updated_at", "sum", "count", "firstDate", "lastDate", "note_count", "reminder_count", "file_count" from "category_view");--> statement-breakpoint
CREATE MATERIALIZED VIEW "public"."date_range_materialized_view" AS (select min("date") as "minDate", max("date") as "maxDate" from "journal_entry");--> statement-breakpoint
CREATE MATERIALIZED VIEW "public"."import_check_materialized_view" AS (select "id", "relation_id", "relation_2_id", "description" from "import_check_view");--> statement-breakpoint
CREATE MATERIALIZED VIEW "public"."journal_extended_view" AS (select "id", "import_id", "import_detail_id", "unique_id", "amount", "transaction_id", "description", "date", "date_text", "tag_id", "bill_id", "budget_id", "category_id", "account_id", "year_month_day", "year_week", "year_month", "year_quarter", "year", "linked", "reconciled", "data_checked", "complete", "transfer", "created_at", "updated_at", "title", "type", "is_cash", "is_net_worth", "account_group", "account_group_2", "account_group_3", "account_group_combined", "account_title_combined", "start_date", "end_date", "account_status", "account_active", "account_disabled", "account_allow_update", "bill_title", "bill_status", "bill_active", "bill_disabled", "bill_allow_update", "budget_title", "budget_status", "budget_active", "budget_disabled", "budget_allow_update", "category_title", "category_group", "category_single", "category_status", "category_active", "category_disabled", "category_allow_update", "tag_title", "tag_group", "tag_single", "tag_status", "tag_active", "tag_disabled", "tag_allow_update", "import_title", "note_count", "reminder_count", "file_count", "all" from "journal_view");--> statement-breakpoint
CREATE MATERIALIZED VIEW "public"."label_materialized_view" AS (select "id", "import_id", "label_import_detail_id", "title", "status", "active", "disabled", "allow_update", "created_at", "updated_at", "sum", "count", "firstDate", "lastDate", "note_count", "reminder_count", "file_count" from "label_view");--> statement-breakpoint
CREATE MATERIALIZED VIEW "public"."tag_materialized_view" AS (select "id", "import_id", "tag_import_detail_id", "title", "group", "single", "status", "active", "disabled", "allow_update", "created_at", "updated_at", "sum", "count", "firstDate", "lastDate", "note_count", "reminder_count", "file_count" from "tag_view");